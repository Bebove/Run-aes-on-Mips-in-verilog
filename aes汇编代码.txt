//keygen part
RAM[ 0]<=32'b001000_00000_00001_00000_100010110_00; //addi 278->reg1
RAM[ 1]<=32'b001000_00000_11101_00000_111000100_00; //addi 452*4->reg29
RAM[ 2]<=32'b001000_00000_11100_00000_111001110_00; //addi 462*4->reg28
RAM[ 3]<=32'b001000_00000_11111_00000_100010011_01; //addi 275->reg31

//FIRST_ROW
RAM[ 4]<=32'b100011_00001_00010_00000_000000100_00; //lw +4 reg2
RAM[ 5]<=32'b100011_00001_00011_00000_000001000_00; //lw +8 reg3
RAM[ 6]<=32'b100011_00001_00100_00000_000001100_00; //lw +12 reg4 
RAM[ 7]<=32'b100011_00001_00101_00000_000000000_00; //lw +0 reg5
RAM[ 8]<=32'b000000_00000_00010_00010_00010_000000; //reg2 <<2
RAM[ 9]<=32'b000000_00000_00011_00011_00010_000000; //reg3 <<2
RAM[10]<=32'b000000_00000_00100_00100_00010_000000; //reg4 <<2
RAM[11]<=32'b000000_00000_00101_00101_00010_000000; //reg5 <<2
RAM[12]<=32'b100011_00010_00110_00000_000000000_00; //lw  reg2 reg6
RAM[13]<=32'b100011_00011_00111_00000_000000000_00; //lw  reg3 reg7
RAM[14]<=32'b100011_00100_01000_00000_000000000_00; //lw  reg4 reg8
RAM[15]<=32'b100011_00101_01001_00000_000000000_00; //lw  reg5 reg9
RAM[16]<=32'b100011_11101_11110_00000_000000000_00; //lw reg29 reg30
RAM[17]<=32'b001000_11101_11101_00000_000000001_00; //addi  reg29 + 4
RAM[18]<=32'b000000_00110_11110_00110_00000_100110; //xor
RAM[19]<=32'b000000_00111_00000_00111_00000_100110; //xor
RAM[20]<=32'b000000_01000_00000_01000_00000_100110; //xor
RAM[21]<=32'b000000_01001_00000_01001_00000_100110; //xor
RAM[22]<=32'b100011_11111_00101_00000_000000000_00; //lw +0 reg2
RAM[23]<=32'b100011_11111_00010_00000_000000100_00; //lw +4 reg3
RAM[24]<=32'b100011_11111_00011_00000_000001000_00; //lw +8 reg4
RAM[25]<=32'b100011_11111_00100_00000_000001100_00; //lw +12 reg5 
RAM[26]<=32'b000000_00110_00101_00110_00000_100110; //xor
RAM[27]<=32'b000000_00111_00010_00111_00000_100110; //xor
RAM[28]<=32'b000000_01000_00011_01000_00000_100110; //xor
RAM[29]<=32'b000000_01001_00100_01001_00000_100110; //xor
RAM[30]<=32'b101011_00001_00110_00000_000001101_00; //sw +13
RAM[31]<=32'b101011_00001_00111_00000_000010001_00; //sw +13+4
RAM[32]<=32'b101011_00001_01000_00000_000010101_00; //sw +13+8
RAM[33]<=32'b101011_00001_01001_00000_000011001_00; //sw +13+12

RAM[34]<=32'b001000_11111_11111_00000_000000001_00; //addi reg31+4->reg31
RAM[35]<=32'b100011_11111_00101_00000_000000000_00; //lw +0 reg2
RAM[36]<=32'b100011_11111_00010_00000_000000100_00; //lw +4 reg3
RAM[37]<=32'b100011_11111_00011_00000_000001000_00; //lw +8 reg4
RAM[38]<=32'b100011_11111_00100_00000_000001100_00; //lw +12 reg5 
RAM[39]<=32'b000000_00110_00101_00110_00000_100110; //xor
RAM[40]<=32'b000000_00111_00010_00111_00000_100110; //xor
RAM[41]<=32'b000000_01000_00011_01000_00000_100110; //xor
RAM[42]<=32'b000000_01001_00100_01001_00000_100110; //xor
RAM[43]<=32'b101011_00001_00110_00000_000001110_00; //sw +13+1
RAM[44]<=32'b101011_00001_00111_00000_000010010_00; //sw +13+4+1
RAM[45]<=32'b101011_00001_01000_00000_000010110_00; //sw +13+8+1
RAM[46]<=32'b101011_00001_01001_00000_000011010_00; //sw +13+12+1

RAM[47]<=32'b001000_11111_11111_00000_000000001_00; //addi reg31+4->reg31
RAM[48]<=32'b100011_11111_00101_00000_000000000_00; //lw +0 reg2
RAM[49]<=32'b100011_11111_00010_00000_000000100_00; //lw +4 reg3
RAM[50]<=32'b100011_11111_00011_00000_000001000_00; //lw +8 reg4
RAM[51]<=32'b100011_11111_00100_00000_000001100_00; //lw +12 reg5 
RAM[52]<=32'b000000_00110_00101_00110_00000_100110; //xor
RAM[53]<=32'b000000_00111_00010_00111_00000_100110; //xor
RAM[54]<=32'b000000_01000_00011_01000_00000_100110; //xor
RAM[55]<=32'b000000_01001_00100_01001_00000_100110; //xor
RAM[56]<=32'b101011_00001_00110_00000_000001111_00; //sw +13+2
RAM[57]<=32'b101011_00001_00111_00000_000010011_00; //sw +13+4+2
RAM[58]<=32'b101011_00001_01000_00000_000010111_00; //sw +13+8+2
RAM[59]<=32'b101011_00001_01001_00000_000011011_00; //sw +13+12+2


RAM[60]<=32'b001000_11111_11111_00000_000000001_00; //addi reg31+4->reg31
RAM[61]<=32'b100011_11111_00101_00000_000000000_00; //lw +0 reg2
RAM[62]<=32'b100011_11111_00010_00000_000000100_00; //lw +4 reg3
RAM[63]<=32'b100011_11111_00011_00000_000001000_00; //lw +8 reg4
RAM[64]<=32'b100011_11111_00100_00000_000001100_00; //lw +12 reg5 
RAM[65]<=32'b000000_00110_00101_00110_00000_100110; //xor
RAM[66]<=32'b000000_00111_00010_00111_00000_100110; //xor
RAM[67]<=32'b000000_01000_00011_01000_00000_100110; //xor
RAM[68]<=32'b000000_01001_00100_01001_00000_100110; //xor
RAM[69]<=32'b101011_00001_00110_00000_000010000_00; //sw +13+3
RAM[70]<=32'b101011_00001_00111_00000_000010100_00; //sw +13+4+3
RAM[71]<=32'b101011_00001_01000_00000_000011000_00; //sw +13+8+3
RAM[72]<=32'b101011_00001_01001_00000_000011100_00; //sw +13+12+3
//FIRST_ROW done
RAM[73]<=32'b001000_11111_11111_00000_000001101_00; //addi reg31+13->reg31
RAM[74]<=32'b001000_00001_00001_00000_000010000_00; //update reg1 + 16
RAM[75]<=32'b000101_11101_11100_11111_110111000_00; //bne reg29==终止地址reg28? continue:pc-72*4







//aes part
//Addroundkey(use reg20 reg21 reg22 reg 16 reg17,fuse reg25)
RAM[76]<=32'b100011_00000_10100_00000_111000011_00; //lw data[451).initial=275->reg20
RAM[77]<=32'b100011_00000_10101_00000_100000010_00; //lw data[258)=259->reg21
RAM[78]<=32'b001000_10101_11001_00000_000010000_00; //addi 259+16 =275->reg25
RAM[79]<=32'b001000_10101_11110_00000_000000001_00; //addi copy to 11110
RAM[80]<=32'b100011_10100_10110_00000_000000000_00; //lw 
RAM[81]<=32'b100011_10101_10000_00000_000000000_00; //lw
RAM[82]<=32'b000000_10110_10000_10001_00000_100110; //xor
RAM[83]<=32'b101011_10101_10001_00000_000000000_00; //sw
RAM[84]<=32'b001000_10100_10100_00000_000000001_00; //addi
RAM[85]<=32'b001000_10101_10101_00000_000000001_00; //addi
RAM[86]<=32'b000101_11110_11001_11111_111111000_00; //bne reg21==reg25? continue:pc-7*4
RAM[87]<=32'b101011_00000_10100_00000_111000011_00; //sw reg20->data[451)


//the BIGround begin ,use reg23 24 as counter
RAM[88]<=32'b001000_00000_11000_00000_000000010_10; //addi set counter n to reg 24
RAM[89]<=32'b001000_00000_10111_00000_000000000_00; //addi set 0 to reg 23
//BIGround bnepoint
RAM[90]<=32'b001000_10111_10111_00000_000000000_01; //set 23=23+1
//subbyte(use reg21 reg2 reg3, fuse reg25)
RAM[91]<=32'b100011_00000_10101_00000_100000010_00; //lw lw data[258)=259->reg21
RAM[92]<=32'b100011_10101_00010_00000_000000000_00; //lw data to reg2
RAM[93]<=32'b000000_00000_00010_00010_00010_000000; //reg2 <<2
RAM[94]<=32'b001000_10101_11110_00000_000000001_00; //addi reg21 copy to 11110
RAM[95]<=32'b100011_00010_00011_00000_000000000_00; //lw the sbox code to reg3
RAM[96]<=32'b101011_10101_00011_00000_000000000_00; //sw reg3 to data
RAM[97]<=32'b001000_10101_10101_00000_000000001_00; //addi reg21
RAM[98]<=32'b000101_11110_11001_11111_111111001_00; //bne reg21==reg25? continue:pc-7*4

//ShiftRows(use reg5-16)
RAM[99]<=32'b100011_00000_00101_00000_100000111_00; //lw data to reg5
RAM[100]<=32'b100011_00000_00110_00000_100001000_00; //lw data to reg6
RAM[101]<=32'b100011_00000_00111_00000_100001001_00; //lw data to reg7
RAM[102]<=32'b100011_00000_01000_00000_100001010_00; //lw data to reg8
RAM[103]<=32'b100011_00000_01001_00000_100001011_00; //lw data to reg9
RAM[104]<=32'b100011_00000_01010_00000_100001100_00; //lw data to reg10
RAM[105]<=32'b100011_00000_01011_00000_100001101_00; //lw data to reg11
RAM[106]<=32'b100011_00000_01100_00000_100001110_00; //lw data to reg12
RAM[107]<=32'b100011_00000_01101_00000_100001111_00; //lw data to reg13
RAM[108]<=32'b100011_00000_01110_00000_100010000_00; //lw data to reg14
RAM[109]<=32'b100011_00000_01111_00000_100010001_00; //lw data to reg15
RAM[110]<=32'b100011_00000_10000_00000_100010010_00; //lw data to reg16
RAM[111]<=32'b101011_00000_00110_00000_100000111_00; //sw data from reg6
RAM[112]<=32'b101011_00000_00111_00000_100001000_00; //sw data from reg7
RAM[113]<=32'b101011_00000_01000_00000_100001001_00; //sw data from reg8
RAM[114]<=32'b101011_00000_00101_00000_100001010_00; //sw data from reg5
RAM[115]<=32'b101011_00000_01011_00000_100001011_00; //sw data from reg11
RAM[116]<=32'b101011_00000_01100_00000_100001100_00; //sw data from reg12
RAM[117]<=32'b101011_00000_01001_00000_100001101_00; //sw data from reg9
RAM[118]<=32'b101011_00000_01010_00000_100001110_00; //sw data from reg10
RAM[119]<=32'b101011_00000_10000_00000_100001111_00; //sw data from reg16
RAM[120]<=32'b101011_00000_01101_00000_100010000_00; //sw data from reg13
RAM[121]<=32'b101011_00000_01110_00000_100010001_00; //sw data from reg14
RAM[122]<=32'b101011_00000_01111_00000_100010010_00; //sw data from reg15
//the bne for the last round of BIGround
RAM[123]<=32'b000100_11000_10111_00000_000110101_00; //beq reg23==reg24? pc-99*4:continue
//Mixcolumns:
//  fixreg:30 29 28 27 26 31;
//  data_reg:2,3,4,5;
//  2_reg :7,8,9,10;
//  3_reg :11,12,13,14;
//  xor_reg :15,16,17,18;
//compare_reg:19,20,21,22; 
RAM[124]<=32'b001000_00000_11110_00000_0000111_1111; //addi reg0 0111_1111 reg30 比较常数
RAM[125]<=32'b001000_00000_11101_00000_0000000_0001; //addi reg0 0000_0001 reg29 1常数
RAM[126]<=32'b001000_00000_11100_00000_0000001_1011; //addi reg0 0001_1011 reg28 xor常数
RAM[127]<=32'b100011_00000_11011_00000_100000010_00; //lw  data[258)=259-> reg27 数据初始地址
RAM[128]<=32'b100011_00000_11010_00000_100000010_00; //lw   拷贝一份地址到reg26
RAM[129]<=32'b001000_11010_11111_00000_000000100_00; //addi 计算终止地址reg26+4到reg31
//load 列数据到reg2，3，4，5,且移位数据
RAM[130]<=32'b100011_11011_00010_00000_000000000_00; //lw data[reg21+0)   reg2
RAM[131]<=32'b100011_11011_00011_00000_000000100_00; //lw data[reg21+4)   reg3
RAM[132]<=32'b100011_11011_00100_00000_000001000_00; //lw data[reg21+8)   reg4
RAM[133]<=32'b100011_11011_00101_00000_000001100_00; //lw data[reg21+12)  reg5
RAM[134]<=32'b000000_00000_00010_00111_11001_000000; //统一移位reg2->reg7
RAM[135]<=32'b000000_00000_00011_01000_11001_000000; //统一移位reg3->reg8
RAM[136]<=32'b000000_00000_00100_01001_11001_000000; //统一移位reg4->reg9
RAM[137]<=32'b000000_00000_00101_01010_11001_000000; //统一移位reg5->reg10
RAM[138]<=32'b000000_00000_00111_00111_11000_000010; //统一移位reg7->reg7
RAM[139]<=32'b000000_00000_01000_01000_11000_000010; //统一移位reg8->reg8
RAM[140]<=32'b000000_00000_01001_01001_11000_000010; //统一移位reg9->reg9
RAM[141]<=32'b000000_00000_01010_01010_11000_000010; //统一移位reg10->reg10
//data_compare
RAM[142]<=32'b000000_11110_00010_10011_00000_101010; //slt reg30reg2reg19 判断数据是否比0111_1111大,大则第八位为1，则需要亦或
RAM[143]<=32'b000000_11110_00011_10100_00000_101010; //slt reg30reg3reg20 判断数据是否比0111_1111大,大则第八位为1，则需要亦或
RAM[144]<=32'b000000_11110_00100_10101_00000_101010; //slt reg30reg4reg21 判断数据是否比0111_1111大,大则第八位为1，则需要亦或
RAM[145]<=32'b000000_11110_00101_10110_00000_101010; //slt reg30reg5reg22 判断数据是否比0111_1111大,大则第八位为1，则需要亦或
//data1
RAM[146]<=32'b000101_10011_11101_00000_000000001_00; //bne reg6 1  pc+4+4  //reg6=0!=1,则不需要操作，则跳转
RAM[147]<=32'b000000_11100_00111_00111_00000_100110; //不跳转，则==1，则说明要进行xor（reg7）
RAM[148]<=32'b000000_00010_00111_01011_00000_100110; //无论跳转与否，都要和s进行xor（reg11）
//data2
RAM[149]<=32'b000101_10100_11101_00000_000000001_00; 
RAM[150]<=32'b000000_11100_01000_01000_00000_100110; //reg8 
RAM[151]<=32'b000000_00011_01000_01100_00000_100110; //reg12
//data3
RAM[152]<=32'b000101_10101_11101_00000_000000001_00; 
RAM[153]<=32'b000000_11100_01001_01001_00000_100110; //reg9
RAM[154]<=32'b000000_00100_01001_01101_00000_100110; //reg13
//data4
RAM[155]<=32'b000101_10110_11101_00000_000000001_00; 
RAM[156]<=32'b000000_11100_01010_01010_00000_100110; //reg10
RAM[157]<=32'b000000_00101_01010_01110_00000_100110; //reg14
//xor reg7 reg12 reg4 reg5 =>reg15
RAM[158]<=32'b000000_00111_01100_01111_00000_100110;
RAM[159]<=32'b000000_00100_01111_01111_00000_100110;
RAM[160]<=32'b000000_00101_01111_01111_00000_100110;
//xor reg2 reg8  reg13 reg5 =>reg16
RAM[161]<=32'b000000_00010_01000_10000_00000_100110;
RAM[162]<=32'b000000_01101_10000_10000_00000_100110;
RAM[163]<=32'b000000_00101_10000_10000_00000_100110;
//xor reg2 reg3 reg9  reg14 =>reg17
RAM[164]<=32'b000000_00010_00011_10001_00000_100110;
RAM[165]<=32'b000000_01001_10001_10001_00000_100110;
RAM[166]<=32'b000000_01110_10001_10001_00000_100110;
//xor reg11 reg3 reg4 reg10 =>reg18
RAM[167]<=32'b000000_01011_00011_10010_00000_100110;
RAM[168]<=32'b000000_00100_10010_10010_00000_100110;
RAM[169]<=32'b000000_01010_10010_10010_00000_100110;
//提前做+1
RAM[170]<=32'b001000_11010_11010_00000_000000001_00; //addi 计算地址reg26+1到reg26
//wb
RAM[171]<=32'b101011_11011_01111_00000_000000000_00; //sw data[reg27+0)   reg15
RAM[172]<=32'b101011_11011_10000_00000_000000100_00; //sw data[reg27+4)   reg16
RAM[173]<=32'b101011_11011_10001_00000_000001000_00; //sw data[reg27+8)   reg17
RAM[174]<=32'b101011_11011_10010_00000_000001100_00; //sw data[reg27+12)  reg18
//循环跳转
RAM[175]<=32'b001000_11011_11011_00000_000000001_00; //addi 计算地址reg27+1到reg27
RAM[176]<=32'b000101_11010_11111_11111_111010001_00; //bne 如果reg26不等于reg31，则向回跳转
//Addroundkey(use reg20 reg21 reg22 reg 23 reg24,fuse reg25)
RAM[177]<=32'b100011_00000_10100_00000_111000011_00; //lw data[451).initial=275->reg20
RAM[178]<=32'b100011_00000_10101_00000_100000010_00; //lw data[258)=259->reg21
RAM[179]<=32'b001000_10101_11001_00000_000010000_00; //addi 259+16 =275->reg25
RAM[180]<=32'b001000_10101_11110_00000_000000001_00; //addi copy to 11110
RAM[181]<=32'b100011_10100_10110_00000_000000000_00; //lw 
RAM[182]<=32'b100011_10101_10000_00000_000000000_00; //lw
RAM[183]<=32'b000000_10110_10000_10001_00000_100110; //xor
RAM[184]<=32'b101011_10101_10001_00000_000000000_00; //sw
RAM[185]<=32'b001000_10100_10100_00000_000000001_00; //addi
RAM[186]<=32'b001000_10101_10101_00000_000000001_00; //addi
RAM[187]<=32'b000101_11110_11001_11111_111111000_00; //bne reg21==reg25? continue:pc-7*4
RAM[188]<=32'b101011_00000_10100_00000_111000011_00; //sw reg20->data[451)
//the BIGround bne end
RAM[189]<=32'b000101_11000_10111_11111_110011100_00; //bne reg23==reg24? continue:pc-99*4







